     char** ExecuteExternalWithPipe(char** argv, int pipe_count, int background)
{
	char* cmd = ArgvToString(argv);
	if (background != -1)
	{
		argv = ArrayRemoveElement(argv, background);
	}

	if (pipe_count == 1 || pipe_count == 2 || pipe_count == 3)
	{
		char** argv1 = (char**)calloc(1, sizeof(char*));
		char** argv2 = (char**)calloc(1, sizeof(char*));
		argv1[0] = NULL;
		argv2[0] = NULL;
		int it = 0;
		while(strcmp(argv[it], "|") != 0)
		{
			argv1 = ArrayPushBack(argv1, argv[it]);
			++it;
		}
		++it;
		while(argv[it] != NULL)
		{
			argv2 = ArrayPushBack(argv2, argv[it]);
			++it;
		}
		
		if (pipe_count == 1)
                {
                        OnePipe(argv1, argv2, background, cmd);
                BigFree(argv1);
                BigFree(argv2);
                }


			if (pipe_count == 2 || pipe_count == 3)
			{
				char** argv3 = (char**)calloc(1, sizeof(char*));
				argv3[0] = NULL;
					while(strcmp(argv[it], "|") != 0)
                                        {
                                        argv2 = ArrayPushBack(argv2, argv[it]);
                                        ++it;
                                        }
                                        ++it;


				if ( pipe_count == 2)
                                {

					while(argv[it] != NULL)
					{
					argv3 = ArrayPushBack(argv3, argv[it]);
					++it;
					}
                        	TwoPipe(argv1, argv2, argv3, background, cmd);
                		BigFree(argv1);
                		BigFree(argv2);
                		BigFree(argv3);
				}
                  			printf("%d", pipe_count);

				if (pipe_count == 3)
				{
				char** argv4 = (char**)calloc(1, sizeof(char*));
				argv4[0] = NULL;

				char** argv0 = (char**)calloc(1, sizeof(char*));
                                argv0[0] = NULL;



		while(strcmp(argv[it], "|") != 0)
		{
			argv0 = ArrayPushBack(argv0, argv[it]);
			++it;
		}
		++it;
		while(argv[it] != NULL)
		{
			argv4 = ArrayPushBack(argv4, argv[it]);
			++it;
		}

				printf("HERE\n");
                                ThreePipe(argv1, argv2, argv0, argv4, background, cmd);
                                BigFree(argv1);
                                BigFree(argv2);
                                BigFree(argv0);
                                BigFree(argv4);
				}
			}



	

	
	
}	



	free(cmd);
	return argv;



}                           
                                
                                
                                


